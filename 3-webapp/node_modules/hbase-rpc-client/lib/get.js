// Generated by CoffeeScript 1.12.7
(function() {
  var Get,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  module.exports = Get = (function() {
    function Get(row) {
      this.row = row;
      this.getRow = bind(this.getRow, this);
      this.getFields = bind(this.getFields, this);
      this.setTimeRange = bind(this.setTimeRange, this);
      this.setMaxVersions = bind(this.setMaxVersions, this);
      this.addColumn = bind(this.addColumn, this);
      this.tr = {
        from: null,
        to: null
      };
      this.familyMap = {};
      this.maxVersions = 1;
    }

    Get.prototype.addColumn = function(cf, qualifier) {
      var base;
      if ((base = this.familyMap)[cf] == null) {
        base[cf] = [];
      }
      if (qualifier) {
        this.familyMap[cf].push(qualifier);
      }
      return this;
    };

    Get.prototype.setMaxVersions = function(maxVersions) {
      if (maxVersions <= 0) {
        maxVersions = 1;
      }
      this.maxVersions = maxVersions;
      return this;
    };

    Get.prototype.setTimeRange = function(minStamp, maxStamp) {
      this.tr = {
        from: minStamp,
        to: maxStamp
      };
      return this;
    };

    Get.prototype.getFields = function() {
      var cf, o, qualifiers, ref;
      o = {
        row: this.row,
        timeRange: this.tr,
        column: [],
        maxVersions: this.maxVersions
      };
      ref = this.familyMap;
      for (cf in ref) {
        qualifiers = ref[cf];
        o.column.push({
          family: cf,
          qualifier: qualifiers.map(function(qualifier) {
            return qualifier;
          })
        });
      }
      return o;
    };

    Get.prototype.getRow = function() {
      return this.row;
    };

    return Get;

  })();

}).call(this);
