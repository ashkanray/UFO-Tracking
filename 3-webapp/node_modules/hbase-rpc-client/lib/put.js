// Generated by CoffeeScript 1.12.7
(function() {
  var ByteBuffer, ProtoBuf, Put, builder, proto,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  ProtoBuf = require("protobufjs");

  ByteBuffer = require('bytebuffer');

  ProtoBuf.convertFieldsToCamelCase = true;

  builder = ProtoBuf.loadProtoFile(__dirname + "/../proto/Client.proto");

  proto = builder.build();

  module.exports = Put = (function() {
    function Put(row, ts) {
      this.row = row;
      this.ts = ts;
      this.getRow = bind(this.getRow, this);
      this.getFields = bind(this.getFields, this);
      this.add = bind(this.add, this);
      this.familyMap = {};
    }

    Put.prototype.add = function(cf, qualifier, value, timestamp) {
      var base;
      if (timestamp == null) {
        timestamp = this.ts;
      }
      if (timestamp == null) {
        timestamp = ByteBuffer.Long.MAX_VALUE;
      }
      if ((base = this.familyMap)[cf] == null) {
        base[cf] = [];
      }
      if (!(typeof value === 'string' || Buffer.isBuffer(value))) {
        throw new Error("Invalid value type, only strings and buffers are allowed. Row: '" + this.row + "' cf: '" + cf + ":" + qualifier + "' value: " + value);
      }
      return this.familyMap[cf].push({
        qualifier: qualifier,
        value: value,
        timestamp: timestamp
      });
    };

    Put.prototype.getFields = function() {
      var cf, o, qualifierValue, ref;
      o = {
        row: this.row,
        mutateType: "PUT",
        columnValue: []
      };
      ref = this.familyMap;
      for (cf in ref) {
        qualifierValue = ref[cf];
        o.columnValue.push({
          family: cf,
          qualifierValue: qualifierValue
        });
      }
      return o;
    };

    Put.prototype.getRow = function() {
      return this.row;
    };

    return Put;

  })();

}).call(this);
